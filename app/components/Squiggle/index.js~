import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

import { useState, useEffect, useRef } from 'react';

const SquiggleStyle = styled.div`
height:100%;
`;

function Squiggle(props) {
  const [dims, setDims] = useState(0);
  const ref = useRef();

  useEffect(() => {
    if (ref  && ref.current) {
      let rect = ref.current.getBoundingClientSquiggle();
      if (dims.toString() !== rect.toString()) {
	 setDims(ref.current.getBoundingClientSquiggle());
      }
    }
  });

  let rects = [];
  let fill = props.color;

  if (props.fill === 'color') {
    fill = props.color;
  }

  if (props.fill === 'none' || !props.fill) {
    fill = 'transparent';
  }

  if (props.fill === 'striped') {
    fill = `url(#horizontal-stripe-1)`;
  }


  for (let i = 0; i < props.number; i++) {
    let rw = props.pdims.width * 0.6;
    let rh = props.pdims.height * 0.2;
    
    let centerx = props.pdims.width / 2 - rw / 2;
    let centery = (props.pdims.height / 2) - (rh / 2) + (i - ((props.number - 1)/2)) * (rh + 10);
    
    rects.push(
      
      <g x={centerx}
	 y={centery}
	 rx="20" ry="20" width="60%" height="20%"
	  transform="translate(0.000000,167.000000) scale(0.100000,-0.100000)" fill="#000000" stroke="none">
     <path d="M1130 1368 c-46 -13 -80 -45 -80 -76 0 -14 20 -59 44 -101 77 -131 81 -197 20 -353 -55 -142 -68 -235 -42 -319 36 -123 208 -209 353 -179 117 24 147 89 86 187 -70 113 -77 205 -26 343 35 93 40 215 12 296 -34 98 -123 174 -236 200 -65 16 -83 16 -131 2z" fill={fill} stroke={props.color} strokeWidth="3"/>
   </g>
      
    ); 
  }

  /*

<rect key={`ri${i}`}
	    x={centerx}
	    y={centery}
	    rx="20" ry="20" width="60%" height="20%" stroke={props.color} fill={fill} strokeWidth="3" />
*/
  
  return (
    <SquiggleStyle>
      <svg width="100%" height="100%">
	  <pattern id="horizontal-stripe-1" patternUnits="userSpaceOnUse" width="10" height="10">
	    <line key="l1" x1="0" x2="100" y1="10" y2="10" stroke={props.color} strokeWidth="4" />
	  </pattern>
	{rects}
      </svg>
    </SquiggleStyle>
  );
}

Squiggle.propTypes = {
  color: PropTypes.string,
  number: PropTypes.number,
  fill: PropTypes.string
};

export default Squiggle;



